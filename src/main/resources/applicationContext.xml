<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
   http://www.springframework.org/schema/tx 
   http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
   http://www.springframework.org/schema/context      
   http://www.springframework.org/schema/context/spring-context-3.1.xsd">


	<!-- 配置文件路径 -->
	<bean id="propertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbcUrl}" />
      <property name="username" value="${username}" />
      <property name="password" value="${password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="${initialSize}" />
      <property name="minIdle" value="${minIdle}" /> 
      <property name="maxActive" value="${maxActive}" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="${maxWait}" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

      <property name="validationQuery" value="${validationQuery}" />
      <property name="testWhileIdle" value="${testWhileIdle}" />
      <property name="testOnBorrow" value="${testOnBorrow}" />
      <property name="testOnReturn" value="${testOnReturn}" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="true" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" /> 
  	</bean>

	<!-- sessionFactoryBean建立 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置Dao接口实现xml文件路径 -->
		<property name="mapperLocations" value="classpath:mapper/*" />
		<!-- 配置对象PO映射路径 -->
		<property name="typeAliasesPackage" value="com.wjg.basic.security.po" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 自动适配Dao目录底下的Dao接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描路径 -->
		<property name="basePackage" value="com.wjg.basic.security.mapper" />
	</bean>

	<!-- 定义事务管理器（声明式的事务） -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" rollback-for="java.lang.Exception" />
			<tx:method name="add*" rollback-for="java.lang.Exception" />
			<tx:method name="update*" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" rollback-for="java.lang.Exception" />
			<!-- 虽然与save*重复,显式声明 -->
			<tx:method name="saveOrUpdate*" rollback-for="java.lang.Exception" />
			<tx:method name="del*" rollback-for="java.lang.Exception" />
			<!-- 虽然与del*重复,显式声明 -->
			<tx:method name="delete*" rollback-for="java.lang.Exception" />
			<tx:method name="cancel*" rollback-for="java.lang.Exception" />
			<tx:method name="callBack*" rollback-for="java.lang.Exception" />
			<tx:method name="set*" rollback-for="java.lang.Exception" />
			<tx:method name="do*" rollback-for="java.lang.Exception" />
			<tx:method name="off*" rollback-for="java.lang.Exception" />
			<!-- 以下方法开头只查询无事务 -->
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="interceptorPointCuts"
			expression="execution(* com.wjg.basic.security.service.impl..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts" />
	</aop:config>
	<!-- 扫描包路径配置 -->
	<context:component-scan base-package="com.wjg.basic.security">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
</beans>

		 